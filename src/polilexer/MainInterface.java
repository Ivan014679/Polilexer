/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package polilexer;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.HashMap;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author Iván
 */
public class MainInterface extends javax.swing.JFrame {
    JFileChooser jf = new JFileChooser();
    String[][] tokens;
    String path;
    File f;
    FileNameExtensionFilter filtertxt = new FileNameExtensionFilter("Archivos de texto (.txt)", "txt");
    int lcount=0;
    
    /**
     * Creates new form Main_Interface
     */
    public MainInterface() {
        initComponents();
        otherInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jToolBar = new javax.swing.JToolBar();
        jButtonNew = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonOpen = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButtonSymbolTable = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButtonCompile = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        codeeditor = new javax.swing.JEditorPane();
        jPanelLine = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        linecount = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        compilation = new javax.swing.JEditorPane();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemCopy = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        jMenuItemCut = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        jMenuItemPaste = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        jMenuCompile = new javax.swing.JMenu();
        jMenuItemSymbolTable = new javax.swing.JMenuItem();
        jMenuItemCompile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Polilexer");
        setBackground(new java.awt.Color(51, 51, 51));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel.setBackground(new java.awt.Color(51, 51, 51));
        jPanel.setLayout(new javax.swing.BoxLayout(jPanel, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel6.setBackground(new java.awt.Color(30, 30, 30));
        jLabel6.setForeground(new java.awt.Color(225, 225, 225));
        jLabel6.setText("   ");
        jPanel1.add(jLabel6);

        jToolBar.setBackground(new java.awt.Color(51, 51, 51));
        jToolBar.setBorder(null);
        jToolBar.setFloatable(false);
        jToolBar.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar.setRollover(true);
        jToolBar.setAlignmentY(-100.0F);
        jToolBar.setMargin(null);

        jButtonNew.setBackground(new java.awt.Color(51, 51, 51));
        jButtonNew.setForeground(new java.awt.Color(204, 204, 204));
        jButtonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_32.png"))); // NOI18N
        jButtonNew.setToolTipText("Nuevo");
        jButtonNew.setBorder(null);
        jButtonNew.setFocusable(false);
        jButtonNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNew.setOpaque(false);
        jButtonNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonNew);

        jLabel2.setBackground(new java.awt.Color(30, 30, 30));
        jLabel2.setForeground(new java.awt.Color(225, 225, 225));
        jLabel2.setText(" ");
        jToolBar.add(jLabel2);

        jButtonOpen.setBackground(new java.awt.Color(51, 51, 51));
        jButtonOpen.setForeground(new java.awt.Color(204, 204, 204));
        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_32.png"))); // NOI18N
        jButtonOpen.setToolTipText("Abrir");
        jButtonOpen.setBorder(null);
        jButtonOpen.setFocusable(false);
        jButtonOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonOpen.setOpaque(false);
        jButtonOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonOpen);

        jLabel3.setBackground(new java.awt.Color(30, 30, 30));
        jLabel3.setForeground(new java.awt.Color(225, 225, 225));
        jLabel3.setText(" ");
        jToolBar.add(jLabel3);

        jButtonSave.setBackground(new java.awt.Color(51, 51, 51));
        jButtonSave.setForeground(new java.awt.Color(204, 204, 204));
        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save_32.png"))); // NOI18N
        jButtonSave.setToolTipText("Guardar");
        jButtonSave.setBorder(null);
        jButtonSave.setBorderPainted(false);
        jButtonSave.setFocusable(false);
        jButtonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSave.setOpaque(false);
        jButtonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonSave);

        jLabel4.setBackground(new java.awt.Color(30, 30, 30));
        jLabel4.setForeground(new java.awt.Color(225, 225, 225));
        jLabel4.setText(" ");
        jToolBar.add(jLabel4);

        jButtonSymbolTable.setBackground(new java.awt.Color(51, 51, 51));
        jButtonSymbolTable.setForeground(new java.awt.Color(204, 204, 204));
        jButtonSymbolTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/symbol-table_32.png"))); // NOI18N
        jButtonSymbolTable.setToolTipText("Tabla de símbolos");
        jButtonSymbolTable.setBorder(null);
        jButtonSymbolTable.setFocusable(false);
        jButtonSymbolTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSymbolTable.setOpaque(false);
        jButtonSymbolTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSymbolTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSymbolTableActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonSymbolTable);

        jLabel5.setBackground(new java.awt.Color(30, 30, 30));
        jLabel5.setForeground(new java.awt.Color(225, 225, 225));
        jLabel5.setText(" ");
        jToolBar.add(jLabel5);

        jButtonCompile.setBackground(new java.awt.Color(51, 51, 51));
        jButtonCompile.setForeground(new java.awt.Color(204, 204, 204));
        jButtonCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/compile_32.png"))); // NOI18N
        jButtonCompile.setToolTipText("Compilar");
        jButtonCompile.setBorder(null);
        jButtonCompile.setFocusable(false);
        jButtonCompile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCompile.setOpaque(false);
        jButtonCompile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompileActionPerformed(evt);
            }
        });
        jToolBar.add(jButtonCompile);

        jPanel1.add(jToolBar);

        jLabel7.setBackground(new java.awt.Color(30, 30, 30));
        jLabel7.setForeground(new java.awt.Color(225, 225, 225));
        jLabel7.setText("   ");
        jPanel1.add(jLabel7);

        jScrollPane2.setBackground(new java.awt.Color(30, 30, 30));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Área de trabajo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10), new java.awt.Color(225, 225, 225))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(30, 30, 30));
        jPanel2.setLayout(new java.awt.BorderLayout());

        codeeditor.setBackground(new java.awt.Color(30, 30, 30));
        codeeditor.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        codeeditor.setForeground(new java.awt.Color(225, 225, 225));
        codeeditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codeeditorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codeeditorKeyReleased(evt);
            }
        });
        jPanel2.add(codeeditor, java.awt.BorderLayout.CENTER);

        jPanelLine.setBackground(new java.awt.Color(30, 30, 30));
        jPanelLine.setLayout(new javax.swing.BoxLayout(jPanelLine, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setBackground(new java.awt.Color(30, 30, 30));
        jLabel1.setForeground(new java.awt.Color(225, 225, 225));
        jLabel1.setText("     ");
        jPanelLine.add(jLabel1);

        linecount.setEditable(false);
        linecount.setBackground(new java.awt.Color(30, 30, 30));
        linecount.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        linecount.setForeground(new java.awt.Color(225, 225, 225));
        linecount.setText("1");
        linecount.setOpaque(false);
        jPanelLine.add(linecount);

        jPanel2.add(jPanelLine, java.awt.BorderLayout.LINE_START);

        jScrollPane2.setViewportView(jPanel2);

        jPanel1.add(jScrollPane2);

        jPanel.add(jPanel1);

        jScrollPane1.setBackground(new java.awt.Color(30, 30, 30));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salida", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10), new java.awt.Color(225, 225, 225))); // NOI18N

        compilation.setEditable(false);
        compilation.setBackground(new java.awt.Color(30, 30, 30));
        compilation.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        compilation.setForeground(new java.awt.Color(225, 225, 225));
        jScrollPane1.setViewportView(compilation);

        jPanel.add(jScrollPane1);

        getContentPane().add(jPanel);

        jMenuBar.setBackground(new java.awt.Color(60, 60, 60));
        jMenuBar.setBorder(null);
        jMenuBar.setForeground(new java.awt.Color(195, 195, 195));

        jMenuFile.setBackground(new java.awt.Color(60, 60, 60));
        jMenuFile.setForeground(new java.awt.Color(195, 195, 195));
        jMenuFile.setText("Archivo");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNew.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemNew.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemNew.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
        jMenuItemNew.setText("Nuevo");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemNew);

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemOpen.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemOpen.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open.png"))); // NOI18N
        jMenuItemOpen.setText("Abrir");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jSeparator1.setBackground(new java.awt.Color(38, 38, 38));
        jSeparator1.setForeground(new java.awt.Color(217, 217, 217));
        jMenuFile.add(jSeparator1);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemSave.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemSave.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jMenuItemSave.setText("Guardar");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSaveAs.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemSaveAs.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemSaveAs.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jMenuItemSaveAs.setText("Guardar como");
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveAs);

        jSeparator2.setBackground(new java.awt.Color(217, 217, 217));
        jSeparator2.setForeground(new java.awt.Color(38, 38, 38));
        jMenuFile.add(jSeparator2);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemExit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemExit.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.png"))); // NOI18N
        jMenuItemExit.setText("Salir");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setBackground(new java.awt.Color(60, 60, 60));
        jMenuEdit.setForeground(new java.awt.Color(195, 195, 195));
        jMenuEdit.setText("Editar");

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCopy.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemCopy.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemCopy.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/copy.png"))); // NOI18N
        jMenuItemCopy.setText("Copiar");
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCut.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemCut.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemCut.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cut.png"))); // NOI18N
        jMenuItemCut.setText("Cortar");
        jMenuEdit.add(jMenuItemCut);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPaste.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemPaste.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemPaste.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paste.png"))); // NOI18N
        jMenuItemPaste.setText("Pegar");
        jMenuEdit.add(jMenuItemPaste);

        jMenuBar.add(jMenuEdit);

        jMenuCompile.setBackground(new java.awt.Color(60, 60, 60));
        jMenuCompile.setForeground(new java.awt.Color(195, 195, 195));
        jMenuCompile.setText("Compilar");

        jMenuItemSymbolTable.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSymbolTable.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemSymbolTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemSymbolTable.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemSymbolTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/symbol-table.png"))); // NOI18N
        jMenuItemSymbolTable.setText("Tabla de símbolos");
        jMenuItemSymbolTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSymbolTableActionPerformed(evt);
            }
        });
        jMenuCompile.add(jMenuItemSymbolTable);

        jMenuItemCompile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItemCompile.setBackground(new java.awt.Color(38, 38, 38));
        jMenuItemCompile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItemCompile.setForeground(new java.awt.Color(217, 217, 217));
        jMenuItemCompile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/compile.png"))); // NOI18N
        jMenuItemCompile.setText("Compilar");
        jMenuItemCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompileActionPerformed(evt);
            }
        });
        jMenuCompile.add(jMenuItemCompile);

        jMenuBar.add(jMenuCompile);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSymbolTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSymbolTableActionPerformed
        new SymbolTableInterface(this, tokens).setVisible(true);
    }//GEN-LAST:event_jButtonSymbolTableActionPerformed

    private void jMenuItemSymbolTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSymbolTableActionPerformed
        new SymbolTableInterface(this, tokens).setVisible(true);
    }//GEN-LAST:event_jMenuItemSymbolTableActionPerformed

    private void codeeditorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeeditorKeyPressed
        StringTokenizer st = new StringTokenizer(codeeditor.getText(),"\n",true);
        String txt = "",token;
        compilation.setText("");
        lcount = 1;

        while (st.hasMoreTokens()){
            token= st.nextToken();
            if("\n".equals(token)) lcount++;
        }

        for(int i = 1; i <= lcount; i++){
            txt += i+"\n";
        }
        linecount.setText(txt);
    }//GEN-LAST:event_codeeditorKeyPressed

    private void codeeditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeeditorKeyReleased
        StringTokenizer st = new StringTokenizer(codeeditor.getText(),"\n",true);
        String txt = "",token;
        lcount = 1;

        while (st.hasMoreTokens()){
            token = st.nextToken();
            if("\n".equals(token)) lcount++;
        }

        for(int i = 1; i <= lcount; i++){
            txt += i+"\n";
        }
        linecount.setText(txt);
    }//GEN-LAST:event_codeeditorKeyReleased

    private void jButtonCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompileActionPerformed
        if(path != null && !"".equals(path)){
            hasSavedFile();
        }else{
            saveFile();
        }
        Values v = Polilexer.compile(path);
        String result = v.message;
        compilation.setText(result);
        tokens = v.table;
    }//GEN-LAST:event_jButtonCompileActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        this.dispose();
        new MainInterface().setVisible(true);
    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        this.dispose();
        new MainInterface().setVisible(true);
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        openFile();
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        openFile();
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(path != null && !"".equals(path)){
            hasSavedFile();
        }else{
            saveFile();
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        if(path != null && !"".equals(path)){
            hasSavedFile();
        }else{
            saveFile();
        }
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
        saveFile();
    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    private void jMenuItemCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompileActionPerformed
        if(path != null && !"".equals(path)){
            hasSavedFile();
        }else{
            saveFile();
        }
        Values v = Polilexer.compile(path);
        String result = v.message;
        compilation.setText(result);
        tokens = v.table;
    }//GEN-LAST:event_jMenuItemCompileActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void otherInitComponents() {
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;
        this.setSize(width/2, ((height/2) + (height/4)));
        jf.addChoosableFileFilter(filtertxt);
        jf.setFileFilter(filtertxt);

        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    private void openFile(){
        //Se abre un jFileChooser
        jf.setCurrentDirectory(new File("src\\polilexer"));
        //Se abre la ventana guardar, y se guarda la opcion seleccionada por el usuario
        int selected = jf.showOpenDialog(this);

        //Si el usuario, pincha en aceptar
        if (selected == JFileChooser.APPROVE_OPTION) {
            //Se selecciona el fichero
            int wordcount = 0;//Creo un contador para las palabras
            try {
                //Aqui se manda la ruta del archivo
                path = jf.getSelectedFile().getAbsolutePath();//Obtiene la ruta
                String lectura = "";
                f = new File(path);

                try {
                    FileReader fr = new FileReader(f);
                    BufferedReader br = new BufferedReader(fr);
                    String aux;
                    //Aqui cuento cuantas palabras hay
                    StreamTokenizer st = new StreamTokenizer(new FileReader(f));
                    while (st.nextToken() != StreamTokenizer.TT_EOF) {
                        if (st.ttype == StreamTokenizer.TT_WORD) {
                            wordcount++;
                        }
                    }

                    //Aqui empieza a leer el archivo linea por linea hasta que en el texto ya no haya nada
                    while ((aux = br.readLine()) != null) {
                        lectura = lectura + aux + "\n";//Se acumula todo en un string
                    }
                } catch (IOException e) {
                }

                codeeditor.setText(lectura);//Mando lo que resulto de la lectura
                int contador;
                StringTokenizer st = new StringTokenizer(codeeditor.getText(), "\n", true);
                String Text = "", token;
                contador = 1;

                while (st.hasMoreTokens()) {
                    token = st.nextToken();
                    if ("\n".equals(token)) {
                        contador++;
                    }
                }

                for (int i = 1; i <= contador; i++) {
                    Text += i + "\n";
                }
                linecount.setText(Text);
            } catch (NullPointerException e) {
            }
        }
    }
    
    private void saveFile(){
        try {
            int seleccion = jf.showSaveDialog(this);
            if(seleccion == JFileChooser.APPROVE_OPTION){
                File sav = jf.getSelectedFile();
                
                if(sav.getName() != null && !"".equals(sav.getName())){
                    path = jf.getSelectedFile().getAbsolutePath();
                    if(!path.contains(".txt")){
                        path = path + ".txt";
                    }
                    if (!new File(path).exists()) {
                        try (FileWriter guard = new FileWriter(path); BufferedWriter saving = new BufferedWriter(guard)) {
                            saving.write(codeeditor.getText());
                            saving.close();
                            guard.close();
                        }                
                    }else{
                        int existAlready = JOptionPane.showConfirmDialog(null, "El archivo ya existe.\n¿Desea sobreescribirlo?", "Ya existe", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if(existAlready == JOptionPane.YES_OPTION){
                            try (FileWriter guard = new FileWriter(path); BufferedWriter saving = new BufferedWriter(guard)) {
                                saving.write(codeeditor.getText());
                                saving.close();
                                guard.close();
                            }                            
                        }
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "No puede dejar el campo de nombre vacío.", "Vacío", JOptionPane.WARNING_MESSAGE);
                }
            }                
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Su archivo no se ha guardado.", "Advertencia", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void hasSavedFile(){
        try {
            String pt;
            if(path.contains(".txt")){
                pt = path;
            }else{
                pt = path + ".txt";
            }            
            try (FileWriter guard = new FileWriter(pt); BufferedWriter saving = new BufferedWriter(guard)) {
                saving.write(codeeditor.getText());
                saving.close();
                guard.close();                
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Su archivo no se ha guardado.", "Advertencia", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane codeeditor;
    private javax.swing.JEditorPane compilation;
    private javax.swing.JButton jButtonCompile;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSymbolTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuCompile;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemCompile;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenuItem jMenuItemSymbolTable;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLine;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JEditorPane linecount;
    // End of variables declaration//GEN-END:variables
}
